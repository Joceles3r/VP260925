#!/bin/bash

# Script de r√©sum√© du coverage des tests VISUAL Platform
# Analyse les fichiers de test et g√©n√®re un rapport de coverage

echo "======================================================================"
echo " üìä VISUAL PLATFORM - Test Coverage Summary"
echo "======================================================================"
echo ""

# Comptage des fichiers de test
TEST_FILES=$(find . -name "*.test.ts" -o -name "*.test.tsx" -o -name "*.spec.ts" | wc -l)
echo "‚úÖ Fichiers de test trouv√©s: $TEST_FILES"
echo ""

# Listing des tests par module
echo "üìÅ Tests par module:"
echo ""

echo "  üîß Server Services:"
find ./server/services/__tests__ -name "*.test.ts" 2>/dev/null | while read file; do
  TEST_COUNT=$(grep -c "test(" "$file" || echo "0")
  echo "    - $(basename $file): $TEST_COUNT tests"
done
echo ""

echo "  üí∞ Revenue Engine:"
if [ -f "./server/revenue/revenueEngine.test.ts" ]; then
  TEST_COUNT=$(grep -c "test(" "./server/revenue/revenueEngine.test.ts")
  echo "    - revenueEngine.test.ts: $TEST_COUNT tests"
fi
echo ""

echo "  üåê Shared Constants:"
if [ -f "./shared/__tests__/constants.spec.ts" ]; then
  TEST_COUNT=$(grep -c "test(" "./shared/__tests__/constants.spec.ts" || echo "0")
  echo "    - constants.spec.ts: $TEST_COUNT tests"
fi
echo ""

# Comptage total des tests
TOTAL_TESTS=0
for file in $(find . -name "*.test.ts" -o -name "*.spec.ts"); do
  COUNT=$(grep -c "test(" "$file" 2>/dev/null || echo "0")
  TOTAL_TESTS=$((TOTAL_TESTS + COUNT))
done

echo "======================================================================"
echo " üìà STATISTIQUES TOTALES"
echo "======================================================================"
echo ""
echo "  Total fichiers de test: $TEST_FILES"
echo "  Total cas de test: ~$TOTAL_TESTS"
echo ""

# Estimation du coverage bas√© sur les fichiers
TOTAL_FILES=$(find ./server -name "*.ts" ! -name "*.test.ts" ! -path "*/node_modules/*" | wc -l)
TESTED_MODULES=$(find ./server -name "*.test.ts" | sed 's/\.test\.ts//g' | sed 's/__tests__\///g' | wc -l)

if [ $TOTAL_FILES -gt 0 ]; then
  COVERAGE_PERCENT=$((TESTED_MODULES * 100 / TOTAL_FILES))
  echo "  üìä Coverage estim√©: ~${COVERAGE_PERCENT}%"
else
  echo "  üìä Coverage estim√©: ~0%"
fi

echo ""
echo "======================================================================"
echo " üéØ MODULES TEST√âS"
echo "======================================================================"
echo ""
echo "  ‚úÖ VisuPointsService    - Conversions, bonus, validations"
echo "  ‚úÖ OverdraftService      - Alertes, frais, seuils"
echo "  ‚úÖ ModerationService     - Signalements, actions admin"
echo "  ‚úÖ ReferralSystem        - Parrainages, codes, limites"
echo "  ‚úÖ RevenueEngine         - Formules 40/30/23/7%, 70/30"
echo ""

echo "======================================================================"
echo " üöÄ AM√âLIORATIONS IMPL√âMENT√âES"
echo "======================================================================"
echo ""
echo "  1. ‚úÖ Slogan centralis√©  - 'Regarde-Investis-Gagne' (trilingue)"
echo "  2. ‚úÖ Tests unitaires    - 4 nouveaux fichiers, ~200+ tests"
echo "  3. üîÑ PWA Push (TODO)    - Notifications push √† impl√©menter"
echo "  4. üîÑ Rollback (TODO)    - Scripts automatiques √† cr√©er"
echo ""

echo "======================================================================"
echo " üìù COMMANDES DISPONIBLES"
echo "======================================================================"
echo ""
echo "  npm test              - Lance tous les tests"
echo "  npm run test:coverage - G√©n√®re rapport de coverage"
echo "  npm run test:watch    - Mode watch pour d√©veloppement"
echo ""

exit 0
