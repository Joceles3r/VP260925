from fastapi import APIRouter, Header, HTTPException, Request
import os, json
from server.audit.ledger import append_audit
from server.db.repo import is_already_processed, upsert_stripe_event, persist_payout_plan
from server.revenue.engine import sale_article_split, category_closure_split

USE_STRIPE_SIGNATURE = False  # mets True en prod (SDK Stripe)
WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET", "")

router = APIRouter(prefix="/webhooks/stripe", tags=["stripe"])

@router.post("")
async def handle(request: Request, stripe_signature: str | None = Header(default=None)):
    payload = await request.body()
    try:
        event = json.loads(payload)  # En prod: valider via stripe.Webhook.construct_event(...)
    except Exception:
        raise HTTPException(400, "Invalid payload JSON")

    event_id = event.get("id", "local-"+str(len(payload)))
    type_ = event.get("type", "unknown")
    if is_already_processed(event_id):
        return {"ok": True, "duplicate": True}

    data = event.get("data", {}).get("object", {})
    meta = data.get("metadata", {})

    # Vente d’article
    if type_ == "checkout.session.completed" and meta.get("kind") == "article_sale":
        price_cents = int(data.get("amount_total"))
        porter_acc = meta["porter_account_id"]
        visual_acc = meta["visual_account_id"]
        plan = sale_article_split(price_cents, porter_acc, visual_acc)
        persist_payout_plan(event_id, "article_sale", plan, raw=event)
        append_audit("stripe_sale_planned", "system", {"event": event_id, "amount": price_cents})

    # Clôture de catégorie
    if type_ == "payment_intent.succeeded" and meta.get("kind") == "category_closure":
        S = int(data["amount"])
        inv_top10 = json.loads(meta["investor_top10"])
        port_top10 = json.loads(meta["porter_top10"])
        inv_11_100 = json.loads(meta["investor_11_100"])
        plan = category_closure_split(S, inv_top10, port_top10, inv_11_100, meta["visual_account_id"])
        persist_payout_plan(event_id, "category_closure", plan, raw=event)
        append_audit("stripe_category_closure_planned", "system", {"event": event_id, "amount": S})

    upsert_stripe_event(event_id, type_, event, True)
    return {"ok": True}
