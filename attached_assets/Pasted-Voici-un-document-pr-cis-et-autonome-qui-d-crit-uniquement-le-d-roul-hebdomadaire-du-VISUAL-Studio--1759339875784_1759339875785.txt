Voici un document précis et autonome qui décrit uniquement le déroulé hebdomadaire du VISUAL Studio Live Show (sélection → live du vendredi → résultats), avec pub intégrée, barème de votes, bataille temps réel, UI spectateur & admin et un orchestrateur.
Timezone : Europe/Paris (tous les horaires ci-dessous).

VISUAL Studio Live Show — Spécification hebdomadaire (précise)
1) Vue d’ensemble
•	Objectif : chaque semaine, conduire la sélection de porteurs jusqu’à 2 finalistes qui s’affrontent en direct le vendredi 21:00–00:00 (bataille A vs B), avec investissements-votes et pauses publicitaires programmées.
•	Fenêtres clés :
•	Sélection : Dim 12:00 → Ven 20:30 (en 3 phases).
•	Live : Ven 21:00 → 00:00 (3h).
•	Fermeture des votes : Ven 23:45.
•	Annonce : entre 23:55 et 00:00 (selon calcul).

2) Timeline hebdomadaire (sélection → live)
Les heures de début/fin ci-dessous sont canoniques.
Les durées affichées en Durée exacte sont calculées.
Phase	Fenêtre (Europe/Paris)	Durée exacte	Candidats	Actions	Élimination/Sortie
Phase 1	Dim 12:00 → Lun 00:00	12 h	100	Dépôt vidéos 3 min + votes communauté	IA + votes communauté → 50 retenus
Phase 2	Lun 00:00 → Mar 00:00	24 h	50	Votes renforcés	Sélection Top 2 finalistes
Phase 3	Mar 00:00 → Ven 20:30	92 h 30	2	Boucle de présentations 30 min (A/B), préparation show	Gel des assets à 20:30
Live Show	Ven 21:00 → 00:00	3 h	2	Direct A vs B + votes/investissements + pub	Résultats puis fin de l’édition
Remarques :
• Le planning fourni mentionnait 36 h et 68 h pour les Phases 1 & 3 ; les heures de début/fin restent identiques, la durée exacte ci-dessus est corrigée arithmétiquement.
• Tous les jobs planifiés doivent utiliser la timezone Europe/Paris (DST inclus).

3) Live Show (21:00–00:00) — déroulé détaillé + publicité
3.1 Structure 3h
•	21:00–21:15 (15 min) — Ouverture
• Présentation A (7’30) + B (7’30) • Rappel règles • Votes ouverts
•	21:15–22:30 (75 min) — Performance A
• Partie 1 (15’) → PAUSE PUB 1 (21:30, 3’) → Partie 2 (27’) → PAUSE PUB 2 (22:00, 4’) → Finale A (26’)
•	22:30–23:45 (75 min) — Performance B
• PAUSE PUB 3 (22:30, 5’) → Partie 1 (25’) → PAUSE PUB 4 (23:00, 4’) → Partie 2 (26’) → PAUSE PUB 5 (23:30, 3’) → Finale B (12’)
•	23:45–00:00 (15 min) — Résultats
• Fermeture votes 23:45 → Calcul (≈2’) → Révélation (≈23:47) → Annonce publique (jusqu’à 00:00)
• Option post-show : PAUSE PUB 6 (00:02, 2’)
3.2 Règles Pub (pendant le live)
•	6 slots planifiés aux heures indiquées (score gelé pendant la pub, bandeau “Pub : mm:ss”).
•	Types : standard / premium / interactive (CTA).
•	L’inventaire pub est géré en amont (booking), puis déclenché automatiquement par l’orchestrateur (avec bouton override dans l’Admin).

4) Votes & investissements (pendant le live)
•	Fenêtre de vote/investissement : 21:00 → 23:45 (fermée ensuite).
•	Tranches autorisées (€) : {2, 3, 4, 5, 6, 8, 10, 12, 15, 20}.
•	Conversion en votes (1 à 10) :
2→1, 3→2, 4→3, 5→4, 6→5, 8→6, 10→7, 12→8, 15→9, 20→10.
•	L’utilisateur choisit A ou B au moment du paiement → votes attribués à ce finaliste.
•	Affichage public : % de votes, € cumulés, delta A/B (temps réel).
Option : palier 25 € (toggle produit) — désactivé par défaut pour garder l’échelle 1–10 votes.

5) Bataille temps réel (A vs B)
•	Scoreboard live (WebSocket) : incréments de votes/€, progression par minute, messages système (“A remonte !”).
•	Anti-triche : 2FA pour investir, rate-limit, heuristiques anti-bot, audit des événements critiques.
•	À 23:45, bascule “Votes fermés” (événement poussé à tous les clients, boutons grisés).

6) Résultat & répartition (spécifique au Live Show)
•	Vainqueur : celui qui a le plus de votes ; en cas d’égalité, départage par € cumulés.
•	Distribution “battle” du pot Live (exclusif au show du vendredi) :
•	40 % → Artiste gagnant
•	30 % → Investisseurs du gagnant (pondéré par rang/volume)
•	20 % → Artiste perdant
•	10 % → Investisseurs du perdant (pro-rata des votes perdants)
Cette clé s’applique uniquement au duel A vs B du Live Show. (Les autres catégories/évènements suivent leurs propres règles, hors périmètre ici.)

7) Interfaces (résumé opérationnel)
7.1 UI Spectateur
•	Lecteur (qualité adaptative), compteur vers pauses pub & fermeture votes.
•	Cartes Finalistes A/B (synopsis, CTA Soutenir avec tranches €).
•	Scoreboard : % votes, €, tendance.
•	Chat léger, réactions (modération active).
7.2 UI Admin (pendant le live)
•	Contrôles Live : Start/Stop, Close Votes (verrouillé 23:45), Déclencheur pub (slots).
•	Monitoring : latence, erreurs player, spectateurs, débit moyen, chute QoE.
•	Résultats : Calculer & Publier (annonce sur le flux).

8) Orchestrateur — comportement attendu
8.1 États & transitions
PLANNED → PRE_SHOW → LIVE_RUNNING → VOTES_CLOSED → RESULT_READY → ENDED
8.2 Tâches planifiées (Europe/Paris)
•	Dim 12:00 : ouvrir Phase 1.
•	Lun 00:00 : passer en Phase 2.
•	Mar 00:00 : passer en Phase 3.
•	Ven 20:30 : geler assets & préparer live.
•	Ven 21:00 : LIVE_RUNNING.
•	Ven 23:45 : VOTES_CLOSED.
•	Ven 23:45–23:55 : calcul résultats.
•	Ven 23:55–00:00 : RESULT_READY → annonce publique.
•	Sam 00:00 : ENDED (post-show / replay si activé).
8.3 Surface API minimale (exemple)
•	GET /live/current → statut, timers, finalistes, score.
•	POST /live/invest { amount, finalist: "A"|"B" } → enregistre investissement + votes.
•	POST /live/close-votes (admin) → ferme les votes.
•	POST /live/ads/trigger (admin) { slotId } → lance une coupure pub.
•	WS /ws/live/:editionId → score:update, ads:break, votes:closed, winner:announced.

9) Annexes “copiables” (TypeScript)
9.1 Planning hebdo (strict, Europe/Paris)
// WEEKLY_SCHEDULE — heures canoniques (Europe/Paris)
export const WEEKLY_SCHEDULE = {
  phase1: {
    start: { dow: "SUNDAY", time: "12:00" },   // Dim 12:00
    end:   { dow: "MONDAY", time: "00:00" },   // Lun 00:00
    candidatesIn: 100, candidatesOut: 50,
    actions: ["Community voting", "3min video submission"],
    elimination: "AI + community votes"
  },
  phase2: {
    start: { dow: "MONDAY", time: "00:00" },
    end:   { dow: "TUESDAY", time: "00:00" },
    candidatesIn: 50, candidatesOut: 2,
    actions: ["Enhanced community voting"],
    elimination: "Top 2 finalists selected"
  },
  phase3: {
    start: { dow: "TUESDAY", time: "00:00" },
    end:   { dow: "FRIDAY",  time: "20:30" },
    candidatesIn: 2, candidatesOut: 2,
    actions: ["30min looped presentations (A/B)", "Show preparation"],
    note: "Assets freeze at 20:30"
  },
  liveShow: {
    start: { dow: "FRIDAY", time: "21:00" },
    end:   { dow: "SATURDAY", time: "00:00" },
    durationHours: 3,
    votingWindow: { start: "21:00", end: "23:45" }
  }
} as const;
9.2 Format 3h + pauses pub
export const LIVE_SHOW_FORMAT = {
  opening:     { slot: "21:00-21:15", ads: [] },
  performance1:{ slot: "21:15-22:30", ads: [{at:"21:30", durMin:3}, {at:"22:00", durMin:4}] },
  performance2:{ slot: "22:30-23:45", ads: [{at:"22:30", durMin:5}, {at:"23:00", durMin:4}, {at:"23:30", durMin:3}] },
  results:     { slot: "23:45-00:00", ads: [{at:"00:02", durMin:2, postShow:true}] }
} as const;
9.3 Barème votes (2–20 €)
export const INVEST_TRANCHES_EUR = [2,3,4,5,6,8,10,12,15,20] as const;
export const VOTE_TABLE = [
  {amount:2, votes:1}, {amount:3, votes:2}, {amount:4, votes:3}, {amount:5, votes:4},
  {amount:6, votes:5}, {amount:8, votes:6}, {amount:10, votes:7}, {amount:12, votes:8},
  {amount:15, votes:9}, {amount:20, votes:10},
] as const;
export function votesFor(amount:number){
  const eligible = VOTE_TABLE.filter(v=>amount>=v.amount);
  return eligible.length ? eligible[eligible.length-1].votes : 0;
}
9.4 IA de présélection (100→50→2)
type Candidate = { id:string; userId:string; videoUrl:string };
export class VisualCandidateAI {
  private static readonly W = { activity:0.40, quality:0.30, engagement:0.20, creativity:0.10 };
  static async preselectCandidates(cands:Candidate[], target:number){
    const scored = await Promise.all(cands.map(async c => {
      const m = {
        activity: await this.analyzeActivity(c.userId),
        quality: await this.analyzeVideoQuality(c.videoUrl),
        engagement: await this.analyzeEngagement(c.userId),
        creativity: await this.analyzeCreativity(c.videoUrl)
      };
      const aiScore = m.activity*this.W.activity + m.quality*this.W.quality + m.engagement*this.W.engagement + m.creativity*this.W.creativity;
      const communityVotes = await this.getCommunityVotes(c.id);
      return {...c, aiScore, communityVotes, total: aiScore + communityVotes};
    }));
    return scored.sort((a,b)=>b.total-a.total).slice(0, target);
  }
  // Stubs à brancher
  private static async analyzeActivity(_:string){ return Math.random()*1.0; }
  private static async analyzeVideoQuality(_:string){ return Math.random()*1.0; }
  private static async analyzeEngagement(_:string){ return Math.random()*1.0; }
  private static async analyzeCreativity(_:string){ return Math.random()*1.0; }
  private static async getCommunityVotes(_:string){ return Math.random()*1.0; }
}

9.5 Orchestrateur — états & endpoints (exemple)
type LiveState = "PLANNED"|"PRE_SHOW"|"LIVE_RUNNING"|"VOTES_CLOSED"|"RESULT_READY"|"ENDED";
type Finalist = "A"|"B";

export interface LiveContext {
  editionId: string;
  state: LiveState;
  finalists: {A:{id:string}, B:{id:string}};
  openVoting: boolean; closeVotesAt: string; // "23:45"
  score: { A:{votes:number, eur:number}, B:{votes:number, eur:number} };
}

export const LiveAPI = {
  getCurrent(): LiveContext,                     // GET /live/current
  invest(amount:number, finalist:Finalist):void, // POST /live/invest
  closeVotes():void,                             // POST /live/close-votes (admin)
  triggerAd(slotId:string):void                  // POST /live/ads/trigger (admin)
};

export const LiveWS = {
  // /ws/live/:editionId
  events: ["score:update","ads:break","votes:closed","winner:announced"]
};

10) Récap’ en une page
•	Sélection : Dim 12:00 → Ven 20:30, 100 → 50 → 2 finalistes (IA + communauté).
•	Live : Ven 21:00–00:00, pub intégrée (6 coups), votes/investissements 21:00–23:45.
•	Votes = € : tranches 2–20 € → 1–10 votes pour A ou B.
•	Résultats : calcul, annonce avant 00:00.
•	Distribution (battle Live) : 40 % artiste gagnant, 30 % investisseurs gagnants, 20 % artiste perdant, 10 % investisseurs perdants.
•	Orchestrateur : états, tâches horaires, endpoints REST + WS, monitoring & anti-triche intégrés.
