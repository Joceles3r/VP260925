parcourir mon dépôt public et me proposer les “dernières touches” tout de suite. Je viens de vérifier VP260925 : structure OK (client/server/shared/deployment/docs) et la plupart des règles récentes sont déjà reflétées dans le README (paliers 2–20 €, etc.). Deux points concrets à corriger/compléter, + un mini-lot de fichiers prêts à coller :
Ce que j’ai constaté (très bref)

•	README : incohérence sur les paliers
En haut de page tu as encore “€1–€20” (ancienne règle), alors que plus bas tu indiques bien “2–20 €” avec prix porteurs 2/3/4/5/10 € et “Voix de l’Info” 0,20–10 € — garder 2–20 € partout. GitHub+1
•	Constantes partagées : je ne vois pas (en accès web) un fichier unique exposant extension_price_eur = 25, paliers, splits 40/30/7/23, etc. Je te fournis un shared_visual_constants.ts à placer sous shared/. GitHub

Patch prêt à copier-coller (README + nouveaux fichiers)
Colle ces fichiers/modifs, ou ouvre un commit/PR avec le contenu ci-dessous.
1) Fix README (remplacer l’ancienne mention 1–20 €)
--- a/README.md
+++ b/README.md
@@
- VISUAL est une plateforme révolutionnaire qui permet aux investisseurs de soutenir des projets de contenus visuels avec de petits montants (€1-€20) tout en influençant les classements via un système de vote communautaire.
+ VISUAL est une plateforme qui permet aux investisseurs de soutenir des projets de contenus visuels avec de petits montants **(2–20 € selon la catégorie)** tout en influençant les classements via un système de vote communautaire.
@@
-   * Micro-investissements : €1 à €20 par projet avec calculs ROI automatiques
-   * ️ Conformité AMF : Rapports automatiques et audit trail complet
+   * Micro-investissements : **2–20 €** (vidéos/documentaires/films), **0,20–10 €** (Les Voix de l’Info) ; calculs ROI automatiques
+   * ️ Conformité (disclaimer légal & audit trail) : voir `/docs/Legal_Disclaimer_VISUAL.md`
2) Constantes partagées (source unique)
shared/shared_visual_constants.ts
// VISUAL — Shared constants (single source of truth)
export const VISUAL_CONSTANTS = {
  currency: "EUR",
  rounding: {
    userPayoutFloorEuro: true,   // arrondi à l’euro inférieur pour paiements utilisateurs
    residualToVisual: true
  },
  extension_price_eur: 25,       // maintien/repêchage (modifiable runtime)

  featureKeys: ["films","videos","documentaires","voix_info","live_show","livres","petites_annonces"],

  priceTiers: {
    videoPorter: [2,3,4,5,10],        // EUR (max 10)
    livresAuthor: [2,3,4,5,8],        // EUR (max 8)
    voixInfoCreator: [0.2,0.5,1,2,3,4,5]  // EUR
  },

  investmentTiers: {
    standard: [2,3,4,5,6,8,10,12,15,20],
    voixInfo: [0.2,0.5,1,2,3,4,5,10]
  },

  votesMapping: { "2":1,"3":2,"4":3,"5":4,"6":5,"8":6,"10":7,"12":8,"15":9,"20":10 },

  splits: {
    videoEvent: { investorsTop10:0.40, portersTop10:0.30, investors11_100:0.07, visual:0.23 },
    perSale:    { creator:0.70, visual:0.30 },
    livresMonthlyPot: { authors:0.60, readers:0.40 }
  },

  schedule: {
    livres: {
      openRRULE:  "FREQ=MONTHLY;BYMONTHDAY=1;BYHOUR=0;BYMINUTE=0;BYSECOND=0",
      closeRRULE: "FREQ=MONTHLY;BYMONTHDAY=-1;BYHOUR=23;BYMINUTE=59;BYSECOND=59",
      timezone:   "Europe/Paris"
    }
  },

  i18n: {
    defaultLocale: "fr-FR",
    supportedLocales: ["fr-FR","en-US","es-ES"],
    urlStrategy: "path-prefix",
    fallbackOrder: ["fr-FR","en-US"]
  }
} as const;

export type VisualConstants = typeof VISUAL_CONSTANTS;
3) API publique des toggles (placeholder si OFF)
Express – server/routes/toggles.ts (si tu es côté Node pour le public gateway)
import { Router, Request, Response } from "express";
export const togglesRouter = Router();

// TODO: remplace par une vraie lecture DB/config
const TOGGLES: Record<string,{is_visible:boolean,msg_off:string}> = {
  films:{is_visible:true,msg_off:""}, videos:{is_visible:true,msg_off:""},
  documentaires:{is_visible:true,msg_off:""}, voix_info:{is_visible:true,msg_off:""},
  live_show:{is_visible:true,msg_off:""}, livres:{is_visible:true,msg_off:""},
  petites_annonces:{is_visible:true,msg_off:""}
};

function resolveMessage(k: string, locale = "fr-FR") {
  const m = TOGGLES[k]?.msg_off || "Catégorie en travaux / en cours.";
  return m;
}

togglesRouter.get("/api/public/toggles", async (req: Request, res: Response) => {
  const locale = (req.query.locale as string) || "fr-FR";
  const out: any = {};
  Object.keys(TOGGLES).forEach(k => {
    const t = TOGGLES[k];
    out[k] = { visible: t.is_visible, message: t.is_visible ? "" : resolveMessage(k, locale) };
  });
  res.setHeader("Cache-Control", "public, max-age=5");
  res.json(out);
});
(Alternative FastAPI : je te l’ai déjà fourni, dis-moi si tu préfères Python en frontal.)
4) Hook d’activation auto des emojis à l’ouverture de section
client/src/emoji/integration/utils.ts
export type SectionKey = "films"|"videos"|"documentaires"|"voix_info"|"live_show"|"livres"|"petites_annonces";
export type PublicToggle = { visible: boolean; message: string };
export type ToggleMap = Record<SectionKey, PublicToggle>;

export function sectionFromPath(pathname: string): SectionKey | null {
  const p = pathname.toLowerCase();
  if (p.startsWith("/films")) return "films";
  if (p.startsWith("/videos")) return "videos";
  if (p.startsWith("/documentaires") || p.startsWith("/docs")) return "documentaires";
  if (p.startsWith("/voix-info") || p.startsWith("/les-voix-de-l-info")) return "voix_info";
  if (p.startsWith("/live") || p.startsWith("/live-show")) return "live_show";
  if (p.startsWith("/livres") || p.startsWith("/books")) return "livres";
  if (p.startsWith("/petites-annonces") || p.startsWith("/classifieds")) return "petites_annonces";
  return null;
}
client/src/emoji/integration/useEmojiOnRouteChange.next.ts (Next.js App Router)
"use client";
import { usePathname } from "next/navigation";
import { triggerEmoji } from "@/emoji/emoji_orchestrator";
import { sectionFromPath, SectionKey } from "./utils";

export function useEmojiOnRouteChangeNext(
  profile: "visitor"|"investisseur"|"porteur"|"admin"="visitor"
) {
  const pathname = usePathname() || "/";
  // Appel léger : si OFF côté backend, tu peux tirer "category_off_view"
  const section = sectionFromPath(pathname);
  if (section) {
    triggerEmoji("category_open", { section, profile });
  }
}
Garde visuelle si OFF (?)
client/src/emoji/integration/ToggleGate.tsx
import React from "react";
import { triggerEmoji } from "@/emoji/emoji_orchestrator";
import type { SectionKey, PublicToggle } from "./utils";

export function ToggleGate({
  section, toggles, message
}: { section: SectionKey; toggles: Record<string,PublicToggle>; message?: string; children: React.ReactNode }) {
  const info = toggles?.[section];
  if (!info?.visible) {
    triggerEmoji("category_off_view", { section });
    return (
      <div className="rounded-xl border p-6 bg-neutral-900/40 backdrop-blur-md text-neutral-100">
        <div className="text-2xl mb-2">?</div>
        <div className="font-semibold mb-1">Section indisponible</div>
        <p className="text-sm opacity-80">{info?.message || message || "Catégorie en travaux / en cours."}</p>
      </div>
    );
  }
  return <>{arguments[0].children}</>;
}
Bouton Dock de Curiosité (“Surprends-moi”)
// client/src/components/DockCuriosite.tsx
import React from "react";
import { triggerEmoji } from "@/emoji/emoji_orchestrator";
export const DockCuriosite = () => (
  <button
    className="neon-glow rounded-full px-4 py-2 text-sm font-semibold bg-fuchsia-600/20 hover:bg-fuchsia-600/30 border border-fuchsia-400/40"
    onClick={(e)=>triggerEmoji("announcement_new",{x:e.clientX,y:e.clientY})}
  >
    ✨ Surprends-moi
  </button>
);

Ce que ça règle tout de suite
•	Cohérence produit : paliers 2–20 € partout + règles visibles dans un fichier de constantes unique.
•	Toggles publics stables → UI affiche ? si OFF.
•	Animations sobres branchées sur ouverture de section et Dock de curiosité.
Si tu veux, je peux transformer ce bloc en PR prête à merger (un seul commit avec ces fichiers). Donne-moi juste la branche cible, et je te fournis le diff complet.
En attendant, tu peux déjà corriger le README et déposer ces fichiers : le dépôt est bien structuré pour les accueillir. GitHub
Vous avez dit :
Oui garder garder 2–20 € partout dans les catégories concernées, je confirme ! Je confirme l'extention à 25€ également !
ChatGPT a dit :
Réflexion durant 22s
Parfait — c’est noté ✅
On fige partout les paliers d’investissement 2–20 € (catégories concernées) et extension_price_eur = 25 €.
Voici les morceaux prêts à coller pour verrouiller la cohérence :
1) Source unique (remplace/valide shared/shared_visual_constants.ts)
// VISUAL — Shared constants (single source of truth)
export const VISUAL_CONSTANTS = {
  currency: "EUR",
  rounding: { userPayoutFloorEuro: true, residualToVisual: true },

  // ✅ Extension confirmée à 25 €
  extension_price_eur: 25,

  featureKeys: ["films","videos","documentaires","voix_info","live_show","livres","petites_annonces"],

  // Prix côté créateurs (inchangé)
  priceTiers: {
    videoPorter: [2,3,4,5,10],        // EUR (max 10)
    livresAuthor: [2,3,4,5,8],        // EUR (max 8)
    voixInfoCreator: [0.2,0.5,1,2,3,4,5]
  },

  // ✅ TOUTES les tranches d’investissement standard = 2–20 €
  investmentTiers: {
    standard: [2,3,4,5,6,8,10,12,15,20],
    voixInfo: [0.2,0.5,1,2,3,4,5,10] // micro pour Voix de l’Info
  },

  votesMapping: { "2":1,"3":2,"4":3,"5":4,"6":5,"8":6,"10":7,"12":8,"15":9,"20":10 },

  splits: {
    videoEvent: { investorsTop10:0.40, portersTop10:0.30, investors11_100:0.07, visual:0.23 },
    perSale:    { creator:0.70, visual:0.30 },
    livresMonthlyPot: { authors:0.60, readers:0.40 }
  },

  schedule: {
    livres: {
      openRRULE:  "FREQ=MONTHLY;BYMONTHDAY=1;BYHOUR=0;BYMINUTE=0;BYSECOND=0",
      closeRRULE: "FREQ=MONTHLY;BYMONTHDAY=-1;BYHOUR=23;BYMINUTE=59;BYSECOND=59",
      timezone:   "Europe/Paris"
    }
  },

  i18n: {
    defaultLocale: "fr-FR",
    supportedLocales: ["fr-FR","en-US","es-ES"],
    urlStrategy: "path-prefix",
    fallbackOrder: ["fr-FR","en-US"]
  }
} as const;
export type VisualConstants = typeof VISUAL_CONSTANTS;
2) Patch README (remplace les anciennes mentions “€1–€20”)
- Micro-investissements : €1 à €20 par projet...
+ Micro-investissements : 2–20 € (catégories vidéo/livres) et 0,20–10 € pour Les Voix de l’Info...
3) Filets anti-régression (à coller dans tes scripts/CI)
•	Recherche rapide des anciennes mentions :
grep -RInE "€1|1–20|1-20|1 à 20" .
•	Test minimal (Jest) pour verrouiller la config : shared/__tests__/constants.spec.ts
import { VISUAL_CONSTANTS } from "../shared_visual_constants";

test("investment tiers = 2–20", () => {
  expect(VISUAL_CONSTANTS.investmentTiers.standard).toEqual([2,3,4,5,6,8,10,12,15,20]);
});

test("extension price = 25", () => {
  expect(VISUAL_CONSTANTS.extension_price_eur).toBe(25);
});
•	Rappel : vérifie que l’UI n’affiche nulle part “1–20 €” (landing/README/FAQ, etc.), et que tout le code consomme exclusivement ces constantes.
